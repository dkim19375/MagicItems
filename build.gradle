plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.6.21'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'io.github.slimjar' version '1.3.0'
}

group 'me.dkim19375'
version '2.0.0'

tasks.withType(JavaCompile) {
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"
    options.encoding = 'UTF-8'
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

license {
    header = rootProject.file("LICENSE")
    include "**/*.kt"
}

final basePackage = 'me.dkim19375.magicitems.libs'

slimJar {
    relocate 'kotlin', "${basePackage}.kotlin"
    relocate 'kotlinx', "${basePackage}.kotlinx"
    relocate 'reactor', "${basePackage}.reactor"
    relocate 'io.github.slimjar', "${basePackage}.slimjar"
    relocate 'org.reactivestreams', "${basePackage}.reactivestreams"

    relocate 'me.dkim19375.dkimbukkitcore', "${basePackage}.dkimbukkitcore"
    relocate 'me.dkim19375.dkimcore', "${basePackage}.dkimcore"
}

repositories {
    mavenCentral()
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { url = 'https://jitpack.io' }
    maven { url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/' }
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT'
    compileOnly 'org.jetbrains:annotations:24.0.1'
    implementation('io.github.dkim19375:dkim-bukkit-core:3.3.45') {
        exclude group: 'org.jetbrains.kotlin'
        exclude group: 'org.jetbrains.kotlinx'
    }
    implementation('org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.10') {
        exclude module: 'annotations'
    }

    slim 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4'
    slim 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor:1.6.4'
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from(sourceSets.main.resources.srcDirs) {
        expand 'pluginVersion': version
    }
}

task copyFile(type: Copy) {
    if (!new File('../.TestServers/1.16/plugins/').exists()) {
        return
    }
    new File('../.TestServers/1.16/plugins/' + project.name + '-' + project.version + '-all.jar').delete()
    from('build/libs/' + project.name + '-' + project.version + '-all.jar')
    into('../.TestServers/1.16/plugins')
    include('*.jar')
}

task deleteAll() {
    for (File file : new File('../.TestServers/1.16/plugins').listFiles()) {
        if (file.name.startsWith(project.name)) {
            file.delete()
        }
    }
    for (File file : new File('../.TestServers/1.8/plugins').listFiles()) {
        if (file.name.startsWith(project.name)) {
            file.delete()
        }
    }
}

tasks.jar.dependsOn licenseFormat
